
from aiogram import Bot, Dispatcher, types, executor
import sqlite3
import logging
import random
from datetime import datetime

API_TOKEN = 'YOUR_TOKEN_HERE'
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = sqlite3.connect('game.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.executescript("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT,
    hp INTEGER DEFAULT 100,
    stamina INTEGER DEFAULT 100,
    hunger INTEGER DEFAULT 0,
    location TEXT DEFAULT '–ù–∞—á–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞',
    faction TEXT DEFAULT '–û–¥–∏–Ω–æ—á–∫–∞',
    profession TEXT DEFAULT '–ù–æ–≤–∏—á–æ–∫',
    skills TEXT DEFAULT '',
    inventory TEXT DEFAULT '',
    artifacts TEXT DEFAULT '',
    shelter_level INTEGER DEFAULT 1,
    is_admin INTEGER DEFAULT 0,
    money INTEGER DEFAULT 100
);

CREATE TABLE IF NOT EXISTS clans (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    leader_id INTEGER
);

CREATE TABLE IF NOT EXISTS auctions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    seller_id INTEGER,
    item TEXT,
    price INTEGER,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
);
""")
conn.commit()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start_game(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"
    cursor.execute("SELECT * FROM users WHERE id=?", (user_id,))
    if not cursor.fetchone():
        cursor.execute("INSERT INTO users (id, username) VALUES (?, ?)", (user_id, username))
        conn.commit()
        await message.answer("–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ó–æ–Ω–µ.")
    else:
        await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(commands=['menu'])
async def show_menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", "‚öîÔ∏è –ë–æ–π", "üß™ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã", "üè† –£–±–µ–∂–∏—â–µ", "üß¨ –ù–∞–≤—ã–∫–∏", "üë• –ö–ª–∞–Ω", "üí∞ –ê—É–∫—Ü–∏–æ–Ω"]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –ö–Ω–æ–ø–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
@dp.message_handler(lambda message: message.text == "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å")
async def inventory(message: types.Message):
    cursor.execute("SELECT inventory FROM users WHERE id=?", (message.from_user.id,))
    inv = cursor.fetchone()[0] or ""
    await message.answer(f"–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: {inv if inv else '–ü—É—Å—Ç–æ'}")

@dp.message_handler(lambda message: message.text == "‚öîÔ∏è –ë–æ–π")
async def fight(message: types.Message):
    success = random.random() > 0.3
    reward = random.randint(10, 50) if success else 0
    cursor.execute("UPDATE users SET money = money + ? WHERE id=?", (reward, message.from_user.id))
    conn.commit()
    await message.answer("–¢—ã –ø–æ–±–µ–¥–∏–ª –≤—Ä–∞–≥–∞ –∏ –ø–æ–ª—É—á–∏–ª {} –º–æ–Ω–µ—Ç!".format(reward) if success else "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –±–æ–π, –Ω–æ –æ—Å—Ç–∞–ª—Å—è –∂–∏–≤.")

@dp.message_handler(lambda message: message.text == "üß™ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã")
async def artifacts(message: types.Message):
    cursor.execute("SELECT artifacts FROM users WHERE id=?", (message.from_user.id,))
    data = cursor.fetchone()[0] or ""
    await message.answer(f"–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: {data if data else '–ù–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤'}")

@dp.message_handler(lambda message: message.text == "üè† –£–±–µ–∂–∏—â–µ")
async def shelter(message: types.Message):
    cursor.execute("SELECT shelter_level FROM users WHERE id=?", (message.from_user.id,))
    level = cursor.fetchone()[0]
    await message.answer(f"–£—Ä–æ–≤–µ–Ω—å —É–±–µ–∂–∏—â–∞: {level}")

@dp.message_handler(lambda message: message.text == "üß¨ –ù–∞–≤—ã–∫–∏")
async def skills(message: types.Message):
    await message.answer("–ù–∞–≤—ã–∫–∏: —Å—Ç—Ä–µ–ª—å–±–∞, –º–µ–¥–∏—Ü–∏–Ω–∞, —Ç–æ—Ä–≥–æ–≤–ª—è. –ü—Ä–æ–∫–∞—á–∫–∞ —Å–∫–æ—Ä–æ!")

@dp.message_handler(lambda message: message.text == "üë• –ö–ª–∞–Ω")
async def clan_menu(message: types.Message):
    await message.answer("–ö–ª–∞–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π /create_clan <–Ω–∞–∑–≤–∞–Ω–∏–µ>.")

@dp.message_handler(commands=["create_clan"])
async def create_clan(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /create_clan <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
    name = args[1]
    cursor.execute("INSERT INTO clans (name, leader_id) VALUES (?, ?)", (name, message.from_user.id))
    conn.commit()
    await message.answer(f"–ö–ª–∞–Ω '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

@dp.message_handler(lambda message: message.text == "üí∞ –ê—É–∫—Ü–∏–æ–Ω")
async def auction(message: types.Message):
    cursor.execute("SELECT item, price FROM auctions ORDER BY timestamp DESC LIMIT 5")
    items = cursor.fetchall()
    text = "\n".join([f"{item} ‚Äî {price} –º–æ–Ω–µ—Ç" for item, price in items]) or "–ê—É–∫—Ü–∏–æ–Ω –ø—É—Å—Ç."
    await message.answer(f"–¢–µ–∫—É—â–∏–µ –ª–æ—Ç—ã:\n{text}")

@dp.message_handler(commands=["sell"])
async def sell_item(message: types.Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) != 3:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /sell <–ø—Ä–µ–¥–º–µ—Ç> <—Ü–µ–Ω–∞>")
    item, price = parts[1], int(parts[2])
    cursor.execute("INSERT INTO auctions (seller_id, item, price) VALUES (?, ?, ?)", (message.from_user.id, item, price))
    conn.commit()
    await message.answer(f"–í—ã—Å—Ç–∞–≤–ª–µ–Ω –ª–æ—Ç: {item} –∑–∞ {price} –º–æ–Ω–µ—Ç.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)